// <auto-generated />
using System;
using AtiehJobCore.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AtiehJobCore.Data.Migrations
{
    [DbContext(typeof(AtiehJobCoreDbContext))]
    partial class AtiehJobCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SectionCode");

                    b.HasKey("Id");

                    b.HasIndex("SectionCode");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100);

                    b.Property<int>("CountryCode");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ShahrestanCode");

                    b.HasKey("Id");

                    b.HasIndex("ShahrestanCode");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Shahrestan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceCode");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Shahrestans");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityCode");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Side");

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Common.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<long?>("DownloadsCount");

                    b.Property<string>("Extensions")
                        .HasMaxLength(10);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<long?>("Size");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Educations.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Educations.ScholarshipDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScholarshipDisciplines");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Educations.ScholarshipTendency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ScholarshipDisciplineCode");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ScholarshipDisciplineCode");

                    b.ToTable("ScholarshipTendencies");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Educations.UniversityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UniversityTypes");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmployerAddressTypes");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityField");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(255);

                    b.Property<bool?>("BeforeDispatchCoordination");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("CurrentState");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Email");

                    b.Property<DateTimeOffset>("EnrollDate");

                    b.Property<string>("EnrollTime")
                        .HasMaxLength(5);

                    b.Property<string>("Family")
                        .HasMaxLength(50);

                    b.Property<string>("FileNumber");

                    b.Property<string>("HumanApplicantUnit")
                        .HasMaxLength(255);

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(100);

                    b.Property<bool?>("InsuranceStatus");

                    b.Property<int?>("IntroductionMethodCode");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(11);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10);

                    b.Property<int?>("OrganizationUnitCode");

                    b.Property<string>("Phone")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyType");

                    b.Property<int?>("Rank");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("IntroductionMethodCode");

                    b.HasIndex("OrganizationUnitCode");

                    b.HasIndex("UserId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.EmployerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("AddressTypeCode");

                    b.Property<int?>("CityCode");

                    b.Property<int?>("CountryCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("EmployerCode");

                    b.Property<string>("Fax");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("PostBox");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("ProvinceCode");

                    b.Property<int?>("SectionCode");

                    b.Property<int?>("ShahrestanCode");

                    b.Property<int?>("StreetCode");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeCode");

                    b.HasIndex("CityCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("EmployerCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("SectionCode");

                    b.HasIndex("ShahrestanCode");

                    b.HasIndex("StreetCode");

                    b.ToTable("EmployerAddresses");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.EmployerTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityCode");

                    b.Property<int?>("CountryCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("EmployerCode");

                    b.Property<string>("Path");

                    b.Property<int?>("ProvinceCode");

                    b.Property<int?>("SectionCode");

                    b.Property<int?>("ShahrestanCode");

                    b.Property<int?>("StreetCode");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("EmployerCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("SectionCode");

                    b.HasIndex("ShahrestanCode");

                    b.HasIndex("StreetCode");

                    b.ToTable("EmployerTransfers");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.IntroductionMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmployerIntroductionMethods");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.OrganizationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmployerOrganizationUnits");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Plus.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName");

                    b.Property<string>("XmlData");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyName")
                        .IsUnique()
                        .HasFilter("[FriendlyName] IS NOT NULL");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Plus.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("EventId");

                    b.Property<string>("LogLevel");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("StateJson");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Plus.SqlCache", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(449);

                    b.Property<DateTimeOffset?>("AbsoluteExpiration");

                    b.Property<DateTimeOffset>("ExpiresAtTime");

                    b.Property<long?>("SlidingExpirationInSeconds");

                    b.Property<byte[]>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtTime")
                        .HasName("Index_ExpiresAtTime");

                    b.ToTable("SqlCache","dbo");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Plus.UserUsedPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserUsedPasswords");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<DateTimeOffset?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<byte?>("GenderType");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailPublic");

                    b.Property<string>("LastName")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("LastVisitedDateTime");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(11);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoFileName")
                        .HasMaxLength(450);

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(150);

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SsnId")
                        .HasMaxLength(100);

                    b.Property<string>("SsnSerial")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Applicant")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicantPost")
                        .HasMaxLength(30);

                    b.Property<byte?>("Coverage");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(255);

                    b.Property<string>("Description");

                    b.Property<byte?>("Dialect");

                    b.Property<string>("EmployerAddressList")
                        .HasMaxLength(255);

                    b.Property<int>("EmployerCode");

                    b.Property<byte?>("EndAge");

                    b.Property<string>("EndTime")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("date");

                    b.Property<byte?>("FaceQuality");

                    b.Property<byte?>("GenderTypes2");

                    b.Property<byte?>("GeneralInfoStatus");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20);

                    b.Property<int?>("InterviewAddressCode");

                    b.Property<string>("InterviewPhone")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsInsurance");

                    b.Property<bool?>("IsPartTimeWork");

                    b.Property<bool?>("LadiesSuitable");

                    b.Property<byte?>("ManCount");

                    b.Property<byte?>("Marital");

                    b.Property<int?>("OccupationalGroupCode");

                    b.Property<int?>("OccupationalHistoryRequired");

                    b.Property<int?>("OccupationalTitleCode");

                    b.Property<byte?>("PhysicalForces");

                    b.Property<string>("PlacementName");

                    b.Property<byte?>("PublicRelations");

                    b.Property<DateTime?>("RepeatDate")
                        .HasColumnType("date");

                    b.Property<bool?>("RetireesSuitable");

                    b.Property<long?>("SalaryFrom");

                    b.Property<long?>("SalaryUntil");

                    b.Property<byte?>("SoldierState");

                    b.Property<byte?>("StartAge");

                    b.Property<string>("StartTime")
                        .HasMaxLength(5);

                    b.Property<byte?>("WageType");

                    b.Property<byte?>("WomanCount");

                    b.Property<int?>("WorkTime");

                    b.HasKey("Id");

                    b.HasIndex("EmployerCode");

                    b.HasIndex("InterviewAddressCode");

                    b.HasIndex("OccupationalGroupCode");

                    b.HasIndex("OccupationalTitleCode");

                    b.ToTable("JobOpportunities");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunityEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("EducationLevelCode");

                    b.Property<int>("JobOpportunityCode");

                    b.Property<int?>("ScholarshipDisciplineCode");

                    b.Property<int?>("ScholarshipTendencyCode");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(50);

                    b.Property<int?>("UniversityTypeCode");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelCode");

                    b.HasIndex("JobOpportunityCode");

                    b.HasIndex("ScholarshipDisciplineCode");

                    b.HasIndex("ScholarshipTendencyCode");

                    b.HasIndex("UniversityTypeCode");

                    b.ToTable("JobOpportunityEducations");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunityReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("JobOpportunityCode");

                    b.Property<int>("JobseekerCode");

                    b.Property<int>("Priority");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("JobOpportunityCode");

                    b.HasIndex("JobseekerCode");

                    b.ToTable("JobOpportunityReservations");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunitySkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("JobOpportunityCode");

                    b.Property<int?>("SkillCourseCode");

                    b.HasKey("Id");

                    b.HasIndex("JobOpportunityCode");

                    b.HasIndex("SkillCourseCode");

                    b.ToTable("JobOpportunitySkills");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.DontWantEmployer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cause")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(100);

                    b.Property<string>("Phone1")
                        .HasMaxLength(50);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("JobseekerDontWantEmployers");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.DrivingLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int?>("DrivingLicenseNameCode");

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("DrivingLicenseNameCode");

                    b.HasIndex("JobseekerId");

                    b.ToTable("JobseekerDrivingLicenses");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.DrivingLicenseName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DrivingLicenseNames");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Average");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int?>("EducationLevelCode");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsStudent");

                    b.Property<int>("JobseekerCode");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("OtherProvinces")
                        .HasMaxLength(255);

                    b.Property<byte?>("PassUnitCount");

                    b.Property<int?>("ProvinceCode");

                    b.Property<int?>("ScholarshipDisciplineCode");

                    b.Property<int?>("ScholarshipTendencyCode");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(255);

                    b.Property<int?>("UniversityTypeCode");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelCode");

                    b.HasIndex("JobseekerCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("ScholarshipDisciplineCode");

                    b.HasIndex("ScholarshipTendencyCode");

                    b.HasIndex("UniversityTypeCode");

                    b.ToTable("JobseekerEducations");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.EssentialPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("JobseekerEssentialPhones");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.ForeignLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("Conversation");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int?>("ForeignLanguageNameCode");

                    b.Property<bool?>("IsLanguageDegree");

                    b.Property<int>("JobseekerId");

                    b.Property<int?>("LanguageDegreeTypeCode");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("Privilege");

                    b.Property<byte?>("Read");

                    b.Property<byte?>("Translation");

                    b.Property<byte?>("Write");

                    b.HasKey("Id");

                    b.HasIndex("ForeignLanguageNameCode");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("LanguageDegreeTypeCode");

                    b.ToTable("JobseekerForeignLanguages");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.ForeignLanguageName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ForeignLanguageNames");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.InstitutionalLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("From")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("InstitutionalLetters");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.JobDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("OccupationalGroupCode")
                        .IsRequired();

                    b.Property<int?>("OccupationalTitleCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("OccupationalGroupCode");

                    b.HasIndex("OccupationalTitleCode");

                    b.ToTable("JobseekerJobDemands");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<byte?>("BeforeSearchState");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(50);

                    b.Property<bool?>("CanHistoryAbuse");

                    b.Property<byte?>("ChildCount");

                    b.Property<int?>("CityCode");

                    b.Property<int?>("CountryCode");

                    b.Property<byte?>("CoverageType");

                    b.Property<byte?>("CoveredBy");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<byte?>("CurrentActivityStatus");

                    b.Property<string>("CurrentState")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<byte?>("DependentPersonsCount");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<byte?>("DisabledPercent");

                    b.Property<byte?>("DisabledType");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDatePension")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("date");

                    b.Property<string>("EnrollTime")
                        .HasMaxLength(5);

                    b.Property<string>("ExemptionCase")
                        .HasMaxLength(255);

                    b.Property<string>("Family")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasMaxLength(50);

                    b.Property<string>("FileNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("HeadHousehold");

                    b.Property<string>("HistoryAbuseDescription")
                        .HasMaxLength(255);

                    b.Property<int?>("InstitutionalLetterCode");

                    b.Property<byte?>("InsuranceHistory");

                    b.Property<bool?>("InsuranceHistoryState");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(50);

                    b.Property<byte?>("InsuranceOrganization");

                    b.Property<bool?>("IsInstitutionalLetter");

                    b.Property<bool?>("IsSpecialDisease");

                    b.Property<byte?>("Marital");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10);

                    b.Property<byte?>("Nationality");

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<byte?>("PhysicalCondition");

                    b.Property<string>("Picture")
                        .HasMaxLength(255);

                    b.Property<string>("PlacementName");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50);

                    b.Property<int?>("ProvinceCode");

                    b.Property<byte?>("ReligionId");

                    b.Property<string>("ReligionName")
                        .HasMaxLength(50);

                    b.Property<string>("RetirementPlace")
                        .HasMaxLength(100);

                    b.Property<byte?>("SacrificeState");

                    b.Property<int?>("SectionCode");

                    b.Property<int?>("ShahrestanCode");

                    b.Property<byte?>("SoldierState");

                    b.Property<string>("SsnId")
                        .HasMaxLength(50);

                    b.Property<string>("SsnSerial")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDatePension")
                        .HasColumnType("date");

                    b.Property<byte?>("Stature");

                    b.Property<int?>("StreetCode");

                    b.Property<bool?>("UnemploymentInsurance");

                    b.Property<int>("UserId");

                    b.Property<long?>("WageMinimum");

                    b.Property<byte?>("WageType");

                    b.Property<byte?>("Weight");

                    b.Property<string>("WorkTime")
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("FileNumber")
                        .IsUnique();

                    b.HasIndex("InstitutionalLetterCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("SectionCode");

                    b.HasIndex("ShahrestanCode");

                    b.HasIndex("StreetCode");

                    b.HasIndex("UserId");

                    b.ToTable("Jobseekers");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.LanguageDegreeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LanguageDegreeTypes");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.OccupationalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<byte?>("ExperienceWork");

                    b.Property<int>("JobseekerId");

                    b.Property<string>("LeaveWorkReason")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("OccupationalGroupCode")
                        .IsRequired();

                    b.Property<int?>("OccupationalTitleCode")
                        .IsRequired();

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("OccupationalGroupCode");

                    b.HasIndex("OccupationalTitleCode");

                    b.ToTable("JobseekerOccupationalHistories");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CollegeName")
                        .HasMaxLength(255);

                    b.Property<int?>("CollegeType");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndPeriodDate")
                        .HasColumnType("date");

                    b.Property<int>("JobseekerId");

                    b.Property<int?>("LearningMethod");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte?>("PeriodTime");

                    b.Property<byte?>("SkillDegree");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.ToTable("JobseekerSkills");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SkillCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SkillCourses");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SkillDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("SkillCourseCode");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("SkillCourseCode");

                    b.ToTable("JobseekerSkillDemands");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SpecialDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("DiseaseDescription")
                        .HasMaxLength(255);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("SpecialDiseaseNameCode");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("SpecialDiseaseNameCode");

                    b.ToTable("JobseekerSpecialDiseases");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SpecialDiseaseName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SpecialDiseaseNames");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("JobseekerId");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("VehicleModel")
                        .HasMaxLength(100);

                    b.Property<int?>("VehicleNameCode");

                    b.HasKey("Id");

                    b.HasIndex("JobseekerId");

                    b.HasIndex("VehicleNameCode");

                    b.ToTable("JobseekerVehicles");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.VehicleName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("VehicleNames");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Occupations.OccupationalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OccupationalGroups");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Occupations.OccupationalTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OccupationalGroupCode");

                    b.HasKey("Id");

                    b.HasIndex("OccupationalGroupCode");

                    b.ToTable("OccupationalTitles");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.AmountUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AmountUnits");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Amount");

                    b.Property<int?>("AmountUnitCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("OrderId")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset?>("PaymentDate");

                    b.Property<int?>("PaymentGatewayCode");

                    b.Property<int?>("PaymentKind");

                    b.Property<string>("PaymentNumber")
                        .HasMaxLength(50);

                    b.Property<bool?>("PaymentState");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("RequestDate");

                    b.Property<bool?>("RequestState");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<long>("UserId");

                    b.Property<int?>("UserId1");

                    b.Property<string>("UserIp")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset?>("VerifyDate");

                    b.Property<bool?>("VerifyState");

                    b.HasKey("Id");

                    b.HasIndex("AmountUnitCode");

                    b.HasIndex("PaymentGatewayCode");

                    b.HasIndex("UserId1");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.PaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("BankCode");

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.PaymentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankUrl");

                    b.Property<string>("CallbackUrl");

                    b.Property<string>("DepartmentCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("PaymentGatewayId");

                    b.Property<string>("Sha1Key");

                    b.Property<string>("SiteIp");

                    b.Property<string>("TerminalId");

                    b.Property<string>("UserCode");

                    b.Property<string>("UserPassword");

                    b.HasKey("Id");

                    b.HasIndex("PaymentGatewayId");

                    b.ToTable("PaymentSettings");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.UserAccountCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BaseChargeAmount");

                    b.Property<int>("ChargeCount");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("OrderId")
                        .HasMaxLength(12);

                    b.Property<int?>("PaymentId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccountCharges");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.UserChargeBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<long>("TotalAmount");

                    b.Property<long>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("UserChargeBox");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.Placement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityType");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FileNumber");

                    b.Property<DateTimeOffset?>("LicenseDate");

                    b.Property<string>("LicenseLocation")
                        .HasMaxLength(50);

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(16);

                    b.Property<int?>("LicenseType");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(50);

                    b.Property<string>("ManagerNationalCode")
                        .HasMaxLength(10);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("ProvinceCode");

                    b.Property<int>("UserId");

                    b.Property<string>("WorkshopCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("UserId");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.PlacementAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("CityCode");

                    b.Property<int?>("CountryCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Fax")
                        .HasMaxLength(25);

                    b.Property<string>("Phone1")
                        .HasMaxLength(100);

                    b.Property<string>("Phone2")
                        .HasMaxLength(100);

                    b.Property<int>("PlacementCode");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25);

                    b.Property<int?>("ProvinceCode");

                    b.Property<int?>("SectionCode");

                    b.Property<int?>("ShahrestanCode");

                    b.Property<int?>("StreetCode");

                    b.HasKey("Id");

                    b.HasIndex("CityCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("PlacementCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("SectionCode");

                    b.HasIndex("ShahrestanCode");

                    b.HasIndex("StreetCode");

                    b.ToTable("PlacementAddresses");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.PlacementBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30);

                    b.Property<int>("BankCode");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("PlacementCode");

                    b.HasKey("Id");

                    b.HasIndex("BankCode");

                    b.HasIndex("PlacementCode");

                    b.ToTable("PlacementBankAccounts");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.City", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Section", "Section")
                        .WithMany("Cities")
                        .HasForeignKey("SectionCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Province", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Section", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Shahrestan", "Shahrestan")
                        .WithMany("Sections")
                        .HasForeignKey("ShahrestanCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Shahrestan", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("Shahrestans")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Address.Street", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.City", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Common.Attachment", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("Attachments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Educations.ScholarshipTendency", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.ScholarshipDiscipline", "ScholarshipDiscipline")
                        .WithMany("ScholarshipTendencies")
                        .HasForeignKey("ScholarshipDisciplineCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.Employer", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.IntroductionMethod", "IntroductionMethod")
                        .WithMany("Employers")
                        .HasForeignKey("IntroductionMethodCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.OrganizationUnit", "OrganizationUnit")
                        .WithMany("Employers")
                        .HasForeignKey("OrganizationUnitCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("Employers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.EmployerAddress", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.AddressType", "AddressType")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("AddressTypeCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.City", "City")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("CityCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Country", "Country")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("CountryCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.Employer", "Employer")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("EmployerCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Section", "Section")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("SectionCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Shahrestan", "Shahrestan")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("ShahrestanCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Street", "Street")
                        .WithMany("EmployerAddresses")
                        .HasForeignKey("StreetCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Employers.EmployerTransfer", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.City", "City")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("CityCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Country", "Country")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("CountryCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.Employer", "Employer")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("EmployerCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Section", "Section")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("SectionCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Shahrestan", "Shahrestan")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("ShahrestanCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Street", "Street")
                        .WithMany("EmployerTransfers")
                        .HasForeignKey("StreetCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.Plus.UserUsedPassword", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserUsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunity", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.Employer", "Employer")
                        .WithMany("JobOpportunities")
                        .HasForeignKey("EmployerCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Employers.EmployerAddress", "InterviewEmployerAddress")
                        .WithMany("JobOpportunities")
                        .HasForeignKey("InterviewAddressCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalGroup", "OccupationalGroup")
                        .WithMany("JobOpportunities")
                        .HasForeignKey("OccupationalGroupCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalTitle", "OccupationalTitle")
                        .WithMany("JobOpportunities")
                        .HasForeignKey("OccupationalTitleCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunityEducation", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.EducationLevel", "EducationLevel")
                        .WithMany("JobOpportunityEducations")
                        .HasForeignKey("EducationLevelCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunity", "JobOpportunity")
                        .WithMany("JobOpportunityEducations")
                        .HasForeignKey("JobOpportunityCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.ScholarshipDiscipline", "ScholarshipDiscipline")
                        .WithMany("JobOpportunityEducations")
                        .HasForeignKey("ScholarshipDisciplineCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.ScholarshipTendency", "ScholarshipTendency")
                        .WithMany("JobOpportunityEducations")
                        .HasForeignKey("ScholarshipTendencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.UniversityType", "UniversityType")
                        .WithMany("JobOpportunityEducations")
                        .HasForeignKey("UniversityTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunityReservation", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunity", "JobOpportunity")
                        .WithMany("JobOpportunityReservations")
                        .HasForeignKey("JobOpportunityCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("JobOpportunityReservations")
                        .HasForeignKey("JobseekerCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunitySkill", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.JobOpportunities.JobOpportunity", "JobOpportunity")
                        .WithMany("JobOpportunitySkills")
                        .HasForeignKey("JobOpportunityCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.SkillCourse", "SkillCourse")
                        .WithMany("JobOpportunitySkills")
                        .HasForeignKey("SkillCourseCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.DontWantEmployer", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("DontWantEmployers")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.DrivingLicense", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.DrivingLicenseName", "DrivingLicenseName")
                        .WithMany("DrivingLicenses")
                        .HasForeignKey("DrivingLicenseNameCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("DrivingLicenses")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Education", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.EducationLevel", "EducationLevel")
                        .WithMany("Educations")
                        .HasForeignKey("EducationLevelCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("Educations")
                        .HasForeignKey("JobseekerCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("Educations")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.ScholarshipDiscipline", "ScholarshipDiscipline")
                        .WithMany("Educations")
                        .HasForeignKey("ScholarshipDisciplineCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.ScholarshipTendency", "ScholarshipTendency")
                        .WithMany("Educations")
                        .HasForeignKey("ScholarshipTendencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AtiehJobCore.Domain.Entities.Educations.UniversityType", "UniversityType")
                        .WithMany("Educations")
                        .HasForeignKey("UniversityTypeCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.EssentialPhone", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("EssentialPhones")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.ForeignLanguage", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.ForeignLanguageName", "ForeignLanguageName")
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("ForeignLanguageNameCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.LanguageDegreeType", "LanguageDegreeType")
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("LanguageDegreeTypeCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.JobDemand", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("JobDemands")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalGroup", "OccupationalGroup")
                        .WithMany("JobDemands")
                        .HasForeignKey("OccupationalGroupCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalTitle", "OccupationalTitle")
                        .WithMany("JobDemands")
                        .HasForeignKey("OccupationalTitleCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.City", "City")
                        .WithMany("Jobseekers")
                        .HasForeignKey("CityCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Country", "Country")
                        .WithMany("Jobseekers")
                        .HasForeignKey("CountryCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.InstitutionalLetter", "InstitutionalLetter")
                        .WithMany("Jobseekers")
                        .HasForeignKey("InstitutionalLetterCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("Jobseekers")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Section", "Section")
                        .WithMany("Jobseekers")
                        .HasForeignKey("SectionCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Shahrestan", "Shahrestan")
                        .WithMany("Jobseekers")
                        .HasForeignKey("ShahrestanCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Street", "Street")
                        .WithMany("Jobseekers")
                        .HasForeignKey("StreetCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("Jobseekers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.OccupationalHistory", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("OccupationalHistories")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalGroup", "OccupationalGroup")
                        .WithMany("OccupationalHistories")
                        .HasForeignKey("OccupationalGroupCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalTitle", "OccupationalTitle")
                        .WithMany("OccupationalHistories")
                        .HasForeignKey("OccupationalTitleCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Skill", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("Skills")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SkillDemand", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("SkillsDemands")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.SkillCourse", "SkillCourse")
                        .WithMany("SkillDemands")
                        .HasForeignKey("SkillCourseCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.SpecialDisease", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("SpecialDiseases")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.SpecialDiseaseName", "SpecialDiseaseName")
                        .WithMany("SpecialDiseases")
                        .HasForeignKey("SpecialDiseaseNameCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Jobseekers.Vehicle", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.Jobseeker", "Jobseeker")
                        .WithMany("Vehicles")
                        .HasForeignKey("JobseekerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Jobseekers.VehicleName", "VehicleName")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleNameCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Occupations.OccupationalTitle", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Occupations.OccupationalGroup", "OccupationalGroup")
                        .WithMany("OccupationalTitles")
                        .HasForeignKey("OccupationalGroupCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.Payment", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.AmountUnit", "AmountUnit")
                        .WithMany("Payments")
                        .HasForeignKey("AmountUnitCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.PaymentGateway", "PaymentGateway")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentGatewayCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.PaymentGateway", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.Bank", "Bank")
                        .WithMany("PaymentGateways")
                        .HasForeignKey("BankCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.PaymentSetting", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.PaymentGateway", "PaymentGateway")
                        .WithMany("PaymentSettings")
                        .HasForeignKey("PaymentGatewayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.UserAccountCharge", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.Payment", "Payment")
                        .WithMany("UserAccountCharges")
                        .HasForeignKey("PaymentId");

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("UserAccountCharges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Payments.UserChargeBox", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.Placement", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("Placements")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Identity.User", "User")
                        .WithMany("Placements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.PlacementAddress", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Address.City", "City")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("CityCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Country", "Country")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("CountryCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Placements.Placement", "Placement")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("PlacementCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Province", "Province")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Section", "Section")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("SectionCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Shahrestan", "Shahrestan")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("ShahrestanCode");

                    b.HasOne("AtiehJobCore.Domain.Entities.Address.Street", "Street")
                        .WithMany("PlacementAddresses")
                        .HasForeignKey("StreetCode");
                });

            modelBuilder.Entity("AtiehJobCore.Domain.Entities.Placements.PlacementBankAccount", b =>
                {
                    b.HasOne("AtiehJobCore.Domain.Entities.Payments.Bank", "Bank")
                        .WithMany("PlacementBankAccounts")
                        .HasForeignKey("BankCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AtiehJobCore.Domain.Entities.Placements.Placement", "Placement")
                        .WithMany("PlacementBankAccounts")
                        .HasForeignKey("PlacementCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
